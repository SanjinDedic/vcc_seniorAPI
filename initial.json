{
  "questions": [
    {
      "title": "Turtle Polygon",
      "content": "\n```python\nimport turtle\n\nt = turtle.Turtle()\n\nfor i in range(6):\n    t.backward(100)\n    t.right(60)\n\n# What shape will be drawn by this turtle program?\n```\n\nPredict the shape drawn by the turtle:",
      "answer": "b",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 1,
      "option_a": "A square",
      "option_b": "A hexagon",
      "option_c": "A pentagon",
      "option_d": "An octagon",
      "option_e": "A triangle",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Whoa, what's this?",
      "content": "\n```python\nimport turtle\n\nt = turtle.Turtle()\nt.speed(0)\n\nfor i in range(36):\n    t.forward(10)\n    t.circle(100)\n    t.right(10)\n```\n\nPredict the shape drawn by the turtle:",
      "answer": "f",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 2,
      "option_a": "A single circle",
      "option_b": "A square",
      "option_c": "A flower-like pattern",
      "option_d": "A spiral",
      "option_e": "A star",
      "option_f": "A donut",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "The condition of my condition",
      "content": "What will this python program print?\n\n```python\nx, y, z = 10, 10, 5\n\nif x > y and y > z:\n    print('A')\nelif x >= y and y > z:\n    print('B')\nelif x == y and y != z:\n    print('C')\nelif x + y > z:\n    print('D')\nelse:\n    print('E')\n```",
      "answer": "b",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 3,
      "option_a": "A",
      "option_b": "B",
      "option_c": "C",
      "option_d": "D",
      "option_e": "B,C and D",
      "option_f": "B, C, D and E",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "One crashes the party",
      "content": "Consider the following Python code:\n\n```python\nx = '10'\ny = 5\nz = 2\n\nprint('A' + x * y)\nprint('B' + str(int(x) + y))\nprint('C' + x * z)\nprint('D' + str(z * int(x)))\nprint('E' + x + y)\nprint('F' + z * x)\n```\nWhich of these print statements will cause a TypeError: can only concatenate str (not \"int\") to str?",
      "answer": "e",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 4,
      "option_a": "```python\nprint('A' + x * y)\n```",
      "option_b": "```python\nprint('B' + str(int(x) + y))\n```",
      "option_c": "```python\nprint('C' + x * z)\n```",
      "option_d": "```python\nprint('D' + str(z * int(x)))\n```",
      "option_e": "```python\nprint('E' + x + y)\n```",
      "option_f": "```python\nprint('F' + z * x)\n```",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Just looking up fruits in my Dictionary",
      "content": "\n```python\nfruit_basket = {'apple': 3, 'banana': 2, 'orange': 4, 'pear': 1}\n\nfruit_basket['banana'] += 2\nfruit_basket.pop('pear')\n\nprint(fruit_basket)\n```\n\nWhat will be the output of this program?",
      "answer": "c",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 5,
      "option_a": "```python\n{'apple': 3, 'banana': 2, 'orange': 4}\n```",
      "option_b": "```python\n{'apple': 3, 'banana': 4, 'orange': 4, 'pear': 1}\n```",
      "option_c": "```python\n{'apple': 3, 'banana': 4, 'orange': 4}\n```",
      "option_d": "```python\n{'apple': 3, 'banana': 2, 'orange': 4, 'pear': 1}\n```",
      "option_e": "```python\n{'apple': 3, 'orange': 4}\n```",
      "option_f": "```python\n{'apple': 3, 'banana': 4, 'orange': 4, 'pear': None}\n```",
      "option_g": "```python\nKeyError: 'pear'\n```",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Stringing me along",
      "content": "\n```python\ntext = \"Python programming is fun and educational\"\n\nwords = text.lower().split()\n\nlong_words = [word for word in words if len(word) > 5]\n\nprint(long_words)\n```\n\nWhat will be the output of this program?",
      "answer": "b",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 6,
      "option_a": "```python\n['python', 'programming']\n```",
      "option_b": "```python\n['python', 'programming', 'educational']\n```",
      "option_c": "```python\n['python', 'programming', 'fun', 'educational']\n```",
      "option_d": "```python\n['programming', 'educational']\n```",
      "option_e": "```python\n['python', 'programming', 'is', 'fun', 'and', 'educational']\n```",
      "option_f": "```python\n['PYTHON', 'PROGRAMMING', 'EDUCATIONAL']\n```",
      "option_g": "```python\n[]\n```",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Ready Set Go!",
      "content": "\n```python\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\n\n# Perform set operations\nunion_set = set1.union(set2)\nintersection_set = set1.intersection(set2)\ndifference_set = set1.difference(set2)\n\nresult = len(union_set) + len(intersection_set) + len(difference_set)\n\nprint(result)\n```\n\nWhat will be the output of this program?",
      "answer": "d",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 7,
      "option_a": "13",
      "option_b": "14",
      "option_c": "15",
      "option_d": "16",
      "option_e": "17",
      "option_f": "18",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Elf Height Converter",
      "content": "```python\ndef elf_height_converter(conversion_factor):\n    return lambda in_: round(in_ * conversion_factor, 1)\n\nelf_to_human = elf_height_converter(1.5)\nelf_to_dwarf = elf_height_converter(0.8)\n\nprint(f\"An elf who is 40 in tall would be {elf_to_human(40)} in tall as a human.\")\nprint(f\"An elf who is 40 in tall would be {elf_to_dwarf(40)} in tall as a dwarf.\")\n```\n\nWhat is the output of this program?\n\nRead more about Python lambda functions here: [Python Lambda Functions](https://www.w3schools.com/python/python_lambda.asp)",
      "answer": "c",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 8,
      "option_a": "An elf who is 40 in tall would be 60 in tall as a human.\nAn elf who is 40 in tall would be 32 in tall as a dwarf.",
      "option_b": "An elf who is 40 in tall would be 60.0 in tall as a human.\nAn elf who is 40 in tall would be 32.0 in tall as a dwarf.",
      "option_c": "An elf who is 40 in tall would be 60.0 in tall as a human.\nAn elf who is 40 in tall would be 32.0 in tall as a dwarf.",
      "option_d": "An elf who is 40 in tall would be 60 in tall as a human.\nAn elf who is 40 in tall would be 32 in tall as a dwarf.",
      "option_e": "An error occurs because lambda functions can't be used inside other functions.",
      "option_f": "An elf who is 40 in tall would be 1.5 in tall as a human.\nAn elf who is 40 in tall would be 0.8 in tall as a dwarf.",
      "option_g": "An elf who is 40 in tall would be 40 in tall as a human.\nAn elf who is 40 in tall would be 40 in tall as a dwarf.",
      "option_h": "elf_to_human(40)\nelf_to_dwarf(40)",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "List Comprehension Math Comprehension",
      "content": "\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nresult = [n**2 for n in numbers if n % 2 == 0]\n\nprint(result)\n```\n\nWhat will be the output of this program?",
      "answer": "b",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 9,
      "option_a": "Every second number between 1 and 10: 2, 4, 6, . . .",
      "option_b": "Squares of even numbers between 1 and 10: 4, 16, 36, . . .",
      "option_c": "Squares of all numbers between 1 and 10: 1, 4, 9, . . .",
      "option_d": "Double of even numbers between 1 and 10: 4, 8, 12, . . .",
      "option_e": "Cubes of even numbers between 1 and 10: 8, 64, 216, . . .",
      "option_f": "An empty list: []",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Weather API",
      "content": "\n```python\nimport requests\n\napi_key = \"your_api_key\"\ncity = \"London\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric\"\n\nresponse = requests.get(url)\ndata = response.json()\n\ntemperature = data['main']['temp']\n\nif temperature < 10:\n    print(f\"It's cold in {city} with {temperature}°C\")\nelif 10 <= temperature < 20:\n    print(f\"It's mild in {city} with {temperature}°C\")\nelse:\n    print(f\"It's warm in {city} with {temperature}°C\")\n```\n\nWhat does this API call and code do?",
      "answer": "b",
      "original_points": 75,
      "type": "mcqs",
      "question_group": 10,
      "option_a": "Prints the current weather description for London",
      "option_b": "Categorizes and prints London's temperature as cold, mild, or warm",
      "option_c": "Displays the wind speed and direction in London",
      "option_d": "Shows the probability of precipitation in London",
      "option_e": "Retrieves and prints the air quality index for London",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Random User API",
      "content": "\n```python\nimport requests\n\nurl = \"https://api.randomuser.me/\"\n\nresponse = requests.get(url)\ndata = response.json()\n\nuser = data['results'][0]\nname = f\"{user['name']['first']} {user['name']['last']}\"\ngender = user['gender']\nage = user['dob']['age']\n\nif gender == 'male':\n    question = \"What's your Discord handle?\" if age < 18 else \"What's your favorite craft beer?\"\nelse:\n    question = \"Are you into Taylor Swift?\" if age < 18 else \"What's your go-to brunch spot?\"\n\nif age < 18:\n    greeting = f\"Hey {name}! {question}\"\nelif 18 <= age < 60:\n    greeting = f\"What's up, {name}? {question}\"\nelse:\n    greeting = f\"Hello {name}! How's your gardening going?\"\n\nprint(greeting)\n```\n\nWhat does this code do?",
      "answer": "c",
      "original_points": 75,
      "type": "mcqs",
      "question_group": 11,
      "option_a": "Creates a playlist based on a user's age and gender",
      "option_b": "Generates a random social media profile",
      "option_c": "Generates a custom greeting with a question based on a random user's gender and age",
      "option_d": "Recommends a movie based on user preferences",
      "option_e": "Suggests a trending hashtag for the user to use",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Dynamic Programming Challenge",
      "content": "Given a set of coin denominations [1, 5, 10, 25, 50] and a target amount of 7654 cents, write a Python function to find the minimum number of coins needed to make up that amount. What is this minimum number?\n\nHint: Greed has something to do with the  best method of soloving this problem.",
      "answer": "157",
      "original_points": 100,
      "type": "short answer",
      "question_group": 12,
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Text File Analysis",
      "content": "Analyze the provided text file 'book.txt' (contents of 'Pride and Prejudice' by Jane Austen) and determine the top 5 most frequent words (excluding common stop words like 'the', 'a', 'an', etc.). What is the 3rd most frequent word?\n\nHint: You can use various text processing techniques, such as regular expressions or natural language processing libraries.",
      "answer": "e",
      "original_points": 150,
      "type": "mcqs",
      "question_group": 13,
      "option_a": "Mr",
      "option_b": "Elizabeth",
      "option_c": "Bennet",
      "option_d": "Darcy",
      "option_e": "not",
      "option_f": "very",
      "option_g": "would",
      "option_h": "could",
      "image_link": "",
      "content_link": "/files/pride_and_prejudice.txt"
    },
    {
      "title": "Bitcoin Trillionaire",
      "content": "The program below is a simplified bitcoin exchange simulator.\n\nIf you select the **buy** option, you will be asked to enter a $ value of how much bitcoin to buy. What input can you enter to guarantee a balance of $1,000,000,000,000 (one trillion dollars) or more?",
      "answer": "inf",
      "original_points": 150,
      "type": "short answer",
      "question_group": 14,
      "image_link": "",
      "content_link": "/files/bitcoin_trillionaire.py"
    },
    {
      "title": "Babies with High Allowances",
      "content": "From the 'boss_baby_corp.json' file, determine how many babies have an allowance above 85 baby bucks per week. Provide the number of such babies.",
      "answer": "11",
      "original_points": 100,
      "type": "short answer",
      "question_group": 15,
      "image_link": "",
      "content_link": "/files/boss_baby_corp.json"
    },
    {
      "title": "The Baby Buck Moguls",
      "content": "Write down the first names in alphabetical order, separated by commas, of the highest baby buck-earning baby in each department. You can find the data in 'boss_baby_corp.json'.",
      "answer": "Biscuit, Formula, Sleepy, Teddy, Triplets",
      "original_points": 100,
      "type": "short answer",
      "question_group": 15,
      "image_link": "",
      "content_link": "/files/boss_baby_corp.json"
    },
    {
      "title": "Which Department has the Most Baby Bucks?",
      "content": "Using the 'boss_baby_corp.json' file, calculate the average baby buck allowance for each department. List the departments in order from highest average allowance to lowest, separated by commas.",
      "answer": "Playtime Strategy, Diaper Research, Formula Development, Pacifier Innovation, Nap Operations",
      "original_points": 100,
      "type": "short answer",
      "question_group": 15,
      "image_link": "",
      "content_link": "/files/boss_baby_corp.json"
    },
    {
      "title": "Top Money Sender",
      "content": "From the CSV file recording play money transfers among eight friends, determine which player sent the highest total amount of money. **Part 2:** Calculate *to two decimal places* the total amount of money that this player sent. (ANSWER FORMAT: 'Bob sent 100.52')",
      "answer": "Helena sent 6302.87",
      "original_points": 100,
      "type": "short answer",
      "question_group": 16,
      "image_link": "",
      "content_link": "/files/transactions.csv"
    },
    {
      "title": "Most Transactions Between Players",
      "content": "Using the CSV file of play money transfers among eight friends, identify all pairs of players who had the highest number of transactions between them (regardless of direction). Then provide the names of the 2 players with the most transactions (in alphabetical order so for example: Alice and Bob).",
      "answer": "Helena and Zayn",
      "original_points": 100,
      "type": "short answer",
      "question_group": 16,
      "image_link": "",
      "content_link": "/files/transactions.csv"
    },
    {
      "title": "Mutable Default Arguments in Python",
      "content": "```python\ndef append_to_list(value, my_list=[]):\n    my_list.append(value)\n    return my_list\n\nprint(append_to_list(1))\nprint(append_to_list(2))\nprint(append_to_list(3))\n```\n\nWhat is the output of this program?",
      "answer": "b",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 17,
      "option_a": "[1]\n[2]\n[3]",
      "option_b": "[1]\n[1, 2]\n[1, 2, 3]",
      "option_c": "[1]\n[1]\n[1]",
      "option_d": "[1]\n[1, 2]\n[3]",
      "option_e": "[1]\n[2]\n[3]",
      "option_f": "An error occurs.",
      "option_g": "[1, 2, 3]",
      "option_h": "[3]",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "Python Decorators: The Russian Doll Function",
      "content": "```python\ndef babushka_doll(matryoshka):\n    def wrapper():\n        print('Opening the outer doll...')\n        matryoshka()\n        print('Closing the outer doll...')\n    return wrapper\n\ndef tiny_doll():\n    print('Surprise! Tiny doll found!')\n\ntiny_doll = babushka_doll(tiny_doll)\ntiny_doll()\n```\n\nWhat is the output of this Russian doll function?",
      "answer": "b",
      "original_points": 50,
      "type": "mcqs",
      "question_group": 18,
      "option_a": "Surprise! Tiny doll found!",
      "option_b": "Opening the outer doll...\nSurprise! Tiny doll found!\nClosing the outer doll...",
      "option_c": "Opening the outer doll...\nClosing the outer doll...",
      "option_d": "An error occurs: too many nested dolls!",
      "option_e": "None (The dolls are too tightly nested to open)",
      "option_f": "Opening the outer doll...\nOpening the middle doll...\nSurprise! Tiny doll found!\nClosing the middle doll...\nClosing the outer doll...",
      "option_g": "Surprise! Tiny doll found!\nOpening the outer doll...\nClosing the outer doll...",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "400 colours but one shines the most",
      "content": "An image `color_patch.png` has been generated using the following code:\n\n```python\nimport numpy as np\nfrom PIL import Image\n\ndef generate_color_patch(width=20, height=20):\n    np.random.seed(42)  # Seed the random number generator for reproducibility\n    # Create a 3D array of random RGB values\n    rgb_array = np.random.randint(0, 256, (height, width, 3), dtype=np.uint8)\n    \n    # Create an image from the array\n    img = Image.fromarray(rgb_array, 'RGB')\n    \n    # Save the image\n    img.save('color_patch.png')\n    \n    print(\"Image saved as 'color_patch.png'\")\n\n# Generate the color patch\ngenerate_color_patch()\n```\n\nHere's the generated color patch:\n\n![Color Patch](/files/color_patch.png)\n\n**Task:** Determine the brightest color in the above color patch. The brightness of a color is defined as the maximum value among its R, G, and B components. Provide your answer as three integers separated by commas (R,G,B) representing the brightest color found in the image.\n\n**Hint Available**",
      "answer": "243, 255, 235",
      "original_points": 200,
      "type": "short answer",
      "question_group": 21,
      "image_link": "",
      "content_link": "/files/color_patch.png"
    },
    {
      "title": "Counting Text Files in a Zip Archive",
      "content": "You are provided with a zip file containing over 200 subfolders and more than 50 text files. Your task is to determine:\n\n1. How many text files are in the zip file?\n2. How many of these text files are not empty?\n\nYou can use any method, such as writing a program or manual inspection, to find the answers.\n\n*Hint:* You might find [this tutorial](https://www.tutorialspoint.com/file-searching-using-python) helpful.",
      "answer": "c",
      "original_points": 200,
      "type": "mcqs",
      "question_group": 21,
      "option_a": "Total text files: 250\nNon-empty text files: 200",
      "option_b": "Total text files: 50\nNon-empty text files: 25",
      "option_c": "Total text files: 60\nNon-empty text files: 42",
      "option_d": "Total text files: 72\nNon-empty text files: 60",
      "option_e": "Total text files: 100\nNon-empty text files: 50",
      "image_link": "",
      "content_link": "/files/archive.zip"
    },
    {
      "title": "The Light Bulb Sequence",
      "content": "You have a row of 5 light bulbs, all initially turned off. Every day for 10 days, you perform the following operation:\n- For each bulb (from left to right), if the current day number plus the bulb's position (1-5) is divisible by 3, toggle that bulb's state.\n\nQuestion: What is the state of each light bulb (on or off) after 10 days? \n\n*(ANSWER FORMAT: On, Off, On, Off, On)*",
      "answer": "Off, On, On, Off, On",
      "original_points": 100,
      "type": "short answer",
      "question_group": 23,
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "The Semi-Perfect Shuffle",
      "content": "You have 9 cards numbered 1 to 9, in order. You perform a \"semi-perfect shuffle\" where you split the deck into two unequal halves (4 on the left and 5 on the right) and then interleave them perfectly, with the right half (bottom) going first. For example, after one shuffle, the order would be: 5, 1, 6, 2, 7, 3, 8, 4, 9.\n\nQuestion: How many shuffles does it take to return the cards to their original order?\n\nYou can approach this problem through logical reasoning or by implementing your own simulation. Explain your method and show your work.",
      "answer": "6",
      "original_points": 100,
      "type": "short answer",
      "question_group": 24,
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "The Prisoner's Escape",
      "content": "In a prison, there are 8 prisoners (numbered 0-7) and 8 doors (numbered 0-7). Each door leads to freedom for a specific prisoner. The doors are randomly shuffled each day. The escape attempt follows these rules:\n\n1. Each prisoner is allowed to open up to 5 doors.\n2. If all prisoners find their exit door, they all escape. If even one fails, they all stay in prison.\n3. If a prisoner's number matches their exit door number, that door becomes permanently locked, reducing the available doors for the subsequent prisoners.\n4. The prisoners attempt to escape in order, from prisoner 0 to prisoner 7.\n\nYour task is to implement the `prisoner_strategy` function to maximize the probability of all prisoners escaping.\n\nQuestion: What is the approximate probability of all prisoners escaping with your implemented strategy?\n\nImplement your strategy in the provided Python code and run the simulation to find the probability.\n\n```python\nimport random\n\ndef prisoner_strategy(prisoner_number, available_doors):\n    \"\"\"\n    Implement the strategy for a single prisoner trying to escape.\n    \n    :param prisoner_number: The number of the current prisoner (0-7)\n    :param available_doors: A set of door numbers that are still available\n    :return: A list of door numbers the prisoner will try (max 5)\n    \"\"\"\n    # TODO: Implement your strategy here\n    # Remember: \n    # - You can try up to 5 doors\n    # - available_doors is a set of integers representing available door numbers\n    # - Return a list of door numbers to try (must be a subset of available_doors)\n    pass\n\ndef simulate_prison_escape(simulations=100000):\n    success_count = 0\n\n    for _ in range(simulations):\n        exit_doors = list(range(8))\n        random.shuffle(exit_doors)\n        available_doors = set(range(8))\n        all_prisoners_succeeded = True\n\n        for prisoner_number in range(8):\n            doors_to_try = prisoner_strategy(prisoner_number, available_doors)\n            \n            if len(doors_to_try) > 5 or not set(doors_to_try).issubset(available_doors):\n                raise ValueError(\"Invalid strategy: too many doors or unavailable doors selected\")\n\n            if exit_doors[prisoner_number] in doors_to_try:\n                if exit_doors[prisoner_number] == prisoner_number:\n                    available_doors.discard(prisoner_number)\n            else:\n                all_prisoners_succeeded = False\n                break\n\n        if all_prisoners_succeeded:\n            success_count += 1\n\n    probability = success_count / simulations\n    print(f\"The approximate probability of all prisoners escaping is: {probability}\")\n\nsimulate_prison_escape()\n```",
      "answer": "c",
      "original_points": 100,
      "type": "mcqs",
      "question_group": 25,
      "option_a": "About 0.1%",
      "option_b": "About 1%",
      "option_c": "About 6%",
      "option_d": "About 11%",
      "option_e": "About 16%",
      "option_f": "About 19%",
      "option_g": "About 23%",
      "option_h": "About 38%",
      "image_link": "",
      "content_link": ""
    },
    {
      "title": "The Dice Reroll Dilemma",
      "content": "You're playing a game where you roll three six-sided dice. After seeing the result, you have an option to reroll 1,2 or all 3 dice. \nYou win if your final sum is higher than the sum of three dice rolled by the house.\n\nConsider two strategies:\nA) Keep your current roll if the total is more than 10, reroll all dice otherwise.\nB) Keep the highest die rolled and reroll the other two.\n\nQuestion: Which strategy gives you a better chance of winning? By approximately how much?\n\nYou can use the provided Python starter code to implement and test these strategies, or work it out mathematically. Can you think of an even better strategy?\n\n```python\nimport random\n\ndef play_dice_game(strategy, n_games=10000):\n    wins = 0\n    for _ in range(n_games):\n        dice = [random.randint(1, 6) for _ in range(3)]\n        if strategy(dice):\n            wins += 1\n    return wins\n\ndef strategy_reroll_if_not_above_10(dice):\n    # Implement the strategy\n    pass\n\ndef strategy_keep_highest(dice):\n    # Implement the strategy\n    pass\n\n# Example usage\nn_games = 10000\nstrategy_a_wins = play_dice_game(strategy_reroll_if_not_above_10, n_games)\nstrategy_b_wins = play_dice_game(strategy_keep_highest, n_games)\n\nprint(f\"Strategy A wins: {strategy_a_wins/n_games:.2%}\")\nprint(f\"Strategy B wins: {strategy_b_wins/n_games:.2%}\")\n```",
      "answer": "b",
      "original_points": 100,
      "type": "mcqs",
      "question_group": 26,
      "option_a": "Strategy A is better by about 2%",
      "option_b": "Strategy B is better by about 2%",
      "option_c": "Strategy A is better by about 5%",
      "option_d": "Strategy B is better by about 5%",
      "option_e": "Strategy A is better by about 9%",
      "option_f": "Strategy B is better by about 9%",
      "option_g": "Both strategies are approximately equal",
      "image_link": "",
      "content_link": ""
    }
  ]
}